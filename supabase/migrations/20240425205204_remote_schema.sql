drop policy "Enable for all" on "public"."movies";

drop function if exists "public"."get_related_movie"(embedding vector, movie_id integer);

drop index if exists "public"."movies_embedding_idx";

create table "public"."genres" (
    "id" bigint generated by default as identity not null,
    "name" text not null
);


alter table "public"."genres" enable row level security;

alter table "public"."movies" add column "genre_ids" bigint[];

alter table "public"."movies" alter column "created_at" set default timezone('utc'::text, now());

alter table "public"."movies" alter column "embedding" set data type vector(384) using "embedding"::vector(384);

CREATE UNIQUE INDEX genres_name_key ON public.genres USING btree (name);

CREATE UNIQUE INDEX genres_pkey ON public.genres USING btree (id);

alter table "public"."genres" add constraint "genres_pkey" PRIMARY KEY using index "genres_pkey";

alter table "public"."genres" add constraint "genres_name_key" UNIQUE using index "genres_name_key";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.movies_by_genre(genre_id integer, match_count integer)
 RETURNS TABLE(id bigint, title text, genre_ids bigint[], popularity double precision, vote_count bigint, budget bigint, release_date date)
 LANGUAGE sql
 STABLE
AS $function$
select
  movies.id,
  movies.title,
  movies.genre_ids,
  movies.popularity,
  movies.vote_count,
  movies.budget,
  movies.release_date
from movies
where genre_id = ANY(movies.genre_ids)
and movies.release_date >= '2024-01-01'
order by movies.budget DESC, movies.vote_count DESC, movies.popularity DESC
limit match_count;
$function$
;

CREATE OR REPLACE FUNCTION public.match_movies(query_embedding vector, match_threshold double precision, match_count integer)
 RETURNS TABLE(id bigint, imdb_id text, title text, similarity double precision)
 LANGUAGE sql
 STABLE
AS $function$select
    movies.id,
    movies.imdb_id,
    movies.title,
    1 - (movies.embedding <=> query_embedding) as similarity
  from movies
  where 1 - (movies.embedding <=> query_embedding) > match_threshold
  order by similarity desc
  limit match_count;$function$
;

grant delete on table "public"."genres" to "anon";

grant insert on table "public"."genres" to "anon";

grant references on table "public"."genres" to "anon";

grant select on table "public"."genres" to "anon";

grant trigger on table "public"."genres" to "anon";

grant truncate on table "public"."genres" to "anon";

grant update on table "public"."genres" to "anon";

grant delete on table "public"."genres" to "authenticated";

grant insert on table "public"."genres" to "authenticated";

grant references on table "public"."genres" to "authenticated";

grant select on table "public"."genres" to "authenticated";

grant trigger on table "public"."genres" to "authenticated";

grant truncate on table "public"."genres" to "authenticated";

grant update on table "public"."genres" to "authenticated";

grant delete on table "public"."genres" to "service_role";

grant insert on table "public"."genres" to "service_role";

grant references on table "public"."genres" to "service_role";

grant select on table "public"."genres" to "service_role";

grant trigger on table "public"."genres" to "service_role";

grant truncate on table "public"."genres" to "service_role";

grant update on table "public"."genres" to "service_role";

create policy "Policy with security definer functions"
on "public"."genres"
as permissive
for all
to public
using (true);


create policy "Policy with security definer functions"
on "public"."movies"
as permissive
for all
to public
using (true);



